#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int n=0; //전체개수

int find_pivot(int arr[], int left, int right)
{
	int num = right - left;
	int a = 0, b = 0, c = 0;
	srand(time(NULL));

	while (num > 2)
	{
		a = rand() % (num);
		b = rand() % (num);
		c = rand() % (num);

		if (a != b && a != c)
			if (b != c) break;
	}
	if (num == 2) { a = left; b = left +1; c = right;}
	if (num == 1) {
		if (arr[left] >= arr[right]) return right;
		else return left;}
	if (num == 0) return left;
	//printf("a:%d b:%d c:%d\n",a, b, c);
	if (arr[a] < arr[b])
	{
		if (arr[b] < arr[c]) return b;
		else
		{
			if (arr[a] < arr[c]) return c;
			else return a;
		}
	}
	else
	{
		if (arr[c] < arr[b]) return b;
		else
		{
			if (arr[a] < arr[c]) return a;
			else return c;
		}
	}
}

int inPlacePartition(int arr[], int left, int right, int k)
{
	int i = left, j;
	int p = arr[k];
	int temp;
	temp = arr[k];
	arr[k] = arr[right];
	arr[right] = temp;
	j = right - 1;

	while (i <= j)
	{
		while (i <= j && arr[i] <= p) i++;
		while (j >= i && arr[j] >= p) j--;
		if (i < j)
		{
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
	}
	temp = arr[i];
	arr[i] = arr[right];
	arr[right] = temp;

	return i;
}

void inPlaceQuickSort(int arr[], int left, int right)
{
	if (left >= right) return;
	int k = find_pivot(arr, left, right);
	if (k < left) k = k + left;

	int a = inPlacePartition(arr, left, right, k);

	//printf("k:%d a:%d\n", k, a);

	inPlaceQuickSort(arr, left, a - 1);
	inPlaceQuickSort(arr, a + 1, right);

}

int main()
{
	int a,i = 0;
	scanf_s("%d", &n);
	int *arr = (int*)malloc(sizeof(int)*n);
	for (int i = 0; i < n; i++) scanf_s("%d", &arr[i]);

	
	inPlaceQuickSort(arr, 0, n - 1);
	for (int i = 0; i < n; i++) printf("%d ", arr[i]);

}
/*
3
4 9 1

8
73 65 48 31 29 20 8 3

8
6 1 8 2 3 5 7 4

4
5 20 15 10

8
30 19 21 45 11 3 55 9

----중복값-----
8
1 3 3 8 4 2 7 3

8
1 4 7 6 8 5 5 4
*/
