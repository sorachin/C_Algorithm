#include <stdio.h> 
#include <stdlib.h> 
struct Node 
{
	int data;
	struct Node* next;
};

struct Node* merge(struct Node* a, struct Node* b)
{
	struct Node* result = NULL;
	if (a == NULL)
		return (b);
	else if (b == NULL)
		return (a);

	if (a->data <= b->data) {
		result = a;
		result->next = merge(a->next, b);
	}
	else {
		result = b;
		result->next = merge(a, b->next);
	}
	return (result);
}

void partition(struct Node* source,
	struct Node** frontRef, struct Node** backRef)
{
	struct Node* fast;
	struct Node* slow;
	slow = source;
	fast = source->next;

	while (fast != NULL) {
		fast = fast->next;
		if (fast != NULL) {
			slow = slow->next;
			fast = fast->next;
		}
	}

	*frontRef = source;
	*backRef = slow->next;
	slow->next = NULL;
}

void mergesort(struct Node** headRef)
{
	struct Node* head = *headRef;
	struct Node* a;
	struct Node* b;

	if ((head == NULL) || (head->next == NULL)) {
		return;
	}

	partition(head, &a, &b);

	mergesort(&a);
	mergesort(&b);
	*headRef = merge(a, b);
}


void push(struct Node** head_ref, int new_data)
{
	struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
	new_node->data = new_data;

	new_node->next = (*head_ref);

	(*head_ref) = new_node;
}

int main()
{
	struct Node* res = NULL;
	struct Node* a = NULL;

	int N, temp;
	scanf_s("%d", &N);


	for (int i = 0; i < N; i++)
	{
		scanf_s("%d", &temp);
		push(&a, temp);
	}

	mergesort(&a);
	while (a != NULL) {
		printf("%d ", a->data);
		a = a->next;
	}

	getchar();
	return 0;
}