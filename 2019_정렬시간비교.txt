#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<Windows.h>



void selection_sort(int arr[], int n) {

	int maxLoc, temp;

	for (int i = n - 1; i >= 0; i--)
	{
		maxLoc = i;
		for (int j = i - 1; j >= 0; j--)
		{
			if (arr[maxLoc] < arr[j])
			{
				maxLoc = j;
			}
		}
		temp = arr[i];
		arr[i] = arr[maxLoc];
		arr[maxLoc] = temp;
	}
	/*
	printf("선택: ");
	for (int i = 0; i < n; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
	*/
}

void insert_sort(int arr[], int n) {

	int Loc, temp;
	for (int i = 1; i < n; i++)
	{
		Loc = i;
		for (int j = i - 1; j >= 0; j--)
		{
			if (arr[i] < arr[j])
			{
				Loc = j;
			}
			else if (arr[i] > arr[j]) break;
		}
		if (Loc != i)
		{
			temp = arr[i];
			for (int step = i - 1; step >= Loc; step--)
			{
				arr[step + 1] = arr[step];
			}
			arr[Loc] = temp;
		}
	}
	/*
	printf("삽입: ");
	for (int i = 0; i < n; i++)
	{
		//printf("%d ", arr[i]);
		printf("%d ", arr[i]);
	}
	printf("\n");
	*/
}

int main(void)
{
	int n;
	scanf_s("%d", &n);
	
	LARGE_INTEGER ticksPerSec;
	LARGE_INTEGER start, end, diff;
	LARGE_INTEGER start2, end2, diff2;
	
	srand(time(NULL));
	int *A = (int *)malloc(sizeof(int) *n);
	int *B = (int *)malloc(sizeof(int) *n);
	int *C = (int *)malloc(sizeof(int) *n);
	

	//##### 무순서 #####
	//for (int i = 0; i < n; i++) A[i] = B[i] = rand();
	
	//##### 정렬된 데이터 ##### 
	/*
	for (int i = 0; i < n; i++) C[i] = rand();
	insert_sort(C, n);
	for (int i = 0; i <= n-1; i++) A[i] = B[i] = C[i]; 
	*/


	//역순 데이터
	/*
	for (int i = 0; i < n; i++) C[i] = rand();
	insert_sort(C, n);
	for (int i = 0; i <= n - 1; i++) A[i] = B[i] = C[(n-1)-i];
	*/
	


	
	QueryPerformanceFrequency(&ticksPerSec);
	QueryPerformanceCounter(&start);
	selection_sort(A, n);
	QueryPerformanceCounter(&end);
	diff.QuadPart = end.QuadPart-start.QuadPart;

	QueryPerformanceCounter(&start2);
	insert_sort(B, n);
	QueryPerformanceCounter(&end2);
	diff2.QuadPart = end2.QuadPart - start2.QuadPart;
	
	printf("선택: %.12f sec\n\n", ((double)diff.QuadPart / (double)ticksPerSec.QuadPart));
	printf("삽입: %.12f sec\n\n", ((double)diff2.QuadPart / (double)ticksPerSec.QuadPart));

	free(A);
	free(B);
}

/*
########## 무순 ##########
10000
선택: 0.110048444571 sec
삽입: 0.082679112288 sec
100000
선택: 10.861974095725 sec
삽입: 8.449519255483 sec

########## 정렬 ##########
10000
선택: 0.108779242036 sec
삽입: 0.000070425576 sec
100000
선택: 10.879441694820 sec
삽입: 0.001328318895 sec

########## 역순 ##########
10000
선택: 0.126645233988 sec
삽입: 0.166281467895 sec
100000
선택: 16.913598613284 sec
삽입: 16.784317817774 sec
*/
